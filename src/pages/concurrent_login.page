<apex:page sidebar="false" showHeader="false" controller="LogalyticsEventDetailController">
<head>
	<title>Logalytics</title>
	<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0"/>
	<meta name="apple-mobile-web-app-capable" content="yes" />
	<meta name="format-detection" content="telephone=no" />
	<link href="{!$Resource.logalytics_styles}" type="text/css" rel="Stylesheet" />
	<style type="text/css">
      html { height: 100% }
      body { height: 100%; margin: 0; padding: 0 }
      #map-canvas { height: 100% }
	</style>
	<script src="https://logalytics.herokuapp.com/static/js/zepto.min.js"></script>
	<script src="https://logalytics.herokuapp.com/static/js/xdate.js"></script>
	<script src="https://logalytics.herokuapp.com/static/js/fastclick.min.js"></script>
	<apex:includeScript value="{!$Resource.logalytics_library}" />
	<script type="text/javascript"
      src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDSMGzW9itG5qGj2EW2HbKjASRtfk9xmHg&sensor=false">
	</script>
	<script type="text/javascript">
		var frozen 			= false;
		var case_created	= false;
		
		if(!LOG){ var LOG = {};}
		var eventJSON = '{!EventJSON}';
		if(eventJSON != ''){
			LOG.event = JSON.parse(eventJSON);
			console.log(LOG.event); 
		}
		
		// Attach fastclick to all clickable DOM elements
		window.addEventListener('load', function () {
			FastClick.attach(document.body);
		}, false);
		
		function getCurrentInfoWindowContent(){
			var dt = new XDate(LOG.event.data.currentLogin.timestamp);
			return '<strong>Recent Login</strong>' +
				'<table>' +
					'<tr><td>Time:</td><td>' + dt.toString() + '</td></tr>' +
					'<tr><td>City</td><td>' + LOG.event.data.currentLogin.city + '</td></tr>' +
					'<tr><td>Country:</td><td>' + LOG.event.data.currentLogin.country + '</td></tr>' +
					'<tr><td>Region:</td><td>' + LOG.event.data.currentLogin.region + '</td></tr>' +
					'<tr><td>Time Zone:</td><td>' + LOG.event.data.currentLogin.timeZone + '</td></tr>' +
					'<tr><td>Domain:</td><td>' + LOG.event.data.currentLogin.domain + '</td></tr>' +
					'<tr><td>ISP:</td><td>' + LOG.event.data.currentLogin.isp + '</td></tr>' +
				'</table>';
		}
		
		function getPreviousInfoWindowContent(){
			var dt = new XDate(LOG.event.data.previousLogin.timestamp);
			return '<strong>Previous Login</strong>' +
				'<table>' +
					'<tr><td>Time:</td><td>' + dt.toString() + '</td></tr>' +
					'<tr><td>City</td><td>' + LOG.event.data.previousLogin.city + '</td></tr>' +
					'<tr><td>Country:</td><td>' + LOG.event.data.previousLogin.country + '</td></tr>' +
					'<tr><td>Region:</td><td>' + LOG.event.data.previousLogin.region + '</td></tr>' +
					'<tr><td>Time Zone:</td><td>' + LOG.event.data.previousLogin.timeZone + '</td></tr>' +
					'<tr><td>Domain:</td><td>' + LOG.event.data.previousLogin.domain + '</td></tr>' +
					'<tr><td>ISP:</td><td>' + LOG.event.data.previousLogin.isp + '</td></tr>' +
				'</table>';
		}
		
		function initializeMap() {
			var mapOptions = {
				mapTypeId: google.maps.MapTypeId.ROADMAP
			};
			var map = new google.maps.Map(document.getElementById("map-canvas"), mapOptions);
			
			var lat 	= parseFloat(LOG.event.data.currentLogin.latitude);
			var lng 	= parseFloat(LOG.event.data.currentLogin.longitude);
			var prevLat = parseFloat(LOG.event.data.previousLogin.latitude);
			var prevLng = parseFloat(LOG.event.data.previousLogin.longitude);
			
			centerMap(map);
			
			var currentmarker = new google.maps.Marker({
				position: new google.maps.LatLng(lat, lng),
				map: map,
				title: 'Current Login'
			});
			
			var previousmarker = new google.maps.Marker({
				position: new google.maps.LatLng(prevLat, prevLng),
				map: map,
				title: 'Previous Login'
			});
			map.setOptions({draggable: false, zoomControl: false, scrollwheel: false, disableDoubleClickZoom: true});
			
			var currentinfowindow = new google.maps.InfoWindow({
      			content: getCurrentInfoWindowContent(),
      			maxWidth: 200
  			});
  			var previousinfowindow = new google.maps.InfoWindow({      			
      			content: getPreviousInfoWindowContent(),
      			maxWidth: 200
  			});
			google.maps.event.addListener(currentmarker, 'click', function() {
    			currentinfowindow.open(map,currentmarker);
  			});
  			google.maps.event.addListener(previousmarker, 'click', function() {
    			previousinfowindow.open(map,previousmarker);
  			});
  			google.maps.event.addListener(currentinfowindow,'closeclick',function(){
   				currentinfowindow.setMap(null);
   				centerMap(map);
			});
			google.maps.event.addListener(previousinfowindow,'closeclick',function(){
   				previousinfowindow.setMap(null);
   				centerMap(map);
			});
		}
		
		function centerMap(map){
			var lat 	= parseFloat(LOG.event.data.currentLogin.latitude);
			var lng 	= parseFloat(LOG.event.data.currentLogin.longitude);
			var prevLat = parseFloat(LOG.event.data.previousLogin.latitude);
			var prevLng = parseFloat(LOG.event.data.previousLogin.longitude);
			
			var lat_min = (lat < prevLat ? lat : prevLat);
			var lat_max = (lat > prevLat ? lat : prevLat);
			var lng_min = (lng < prevLng ? lng : prevLng);
			var lng_max = (lng > prevLng ? lng : prevLng);
			
			map.setCenter(new google.maps.LatLng(
				((lat_max + lat_min) / 2.0),
				((lng_max + lng_min) / 2.0)
			));
			
			map.fitBounds(new google.maps.LatLngBounds(
				//bottom left
				new google.maps.LatLng(lat_min, lng_min),
				//top right
				new google.maps.LatLng(lat_max, lng_max)
			));
		}
		
		google.maps.event.addDomListener(window, 'load', initializeMap);
		
		function freezeUser() {
        	Visualforce.remoting.Manager.invokeAction(
            	'{!$RemoteAction.LogalyticsEventDetailController.freezeUser}',
            	LOG.event.data.userId, 
            	function(result, event){
                	if (event.status) {
                    	$("#loading-img").hide();
						$("#freeze-user-btn").removeClass("red-background");
						$("#freeze-user-btn").text("User Frozen");
						frozen = true;
                	} else if (event.type === 'exception') {
                		alert(event.message);
                	} else {
                		alert(event.message);
                	}
            	}, 
            	{escape: true}
        	);
    	}
    	
		LOG.createCase = function(subject, description) {
			Visualforce.remoting.Manager.invokeAction(
		    	'{!$RemoteAction.LogalyticsEventDetailController.createCase}',
		    	subject, 
		    	description, 
		    	function(result, event){
		        	if (event.status) {
		            	$("#loading-img").hide();
						$("#create-case-btn").removeClass("green-background");
						$("#create-case-btn").text("Case Created");
						case_created = true;
		        	} else if (event.type === 'exception') {
		        		$("#loading-img").hide();
		        		alert(event.message);
		        	} else {
		        		$("#loading-img").hide();
		        		alert(event.message);
		        	}
		    	}, 
		    	{escape: true}
			);
		};
    	
		Zepto(function($){
			LOG.registerEventHandlers();
			$("#username").text(LOG.event.data.userName);
			
			var prevDT = new XDate(LOG.event.data.previousLogin.timestamp);
			$("#prevTime").text(prevDT.toString());
			$("#prevCity").text(LOG.event.data.previousLogin.city);
			$("#prevCountry").text(LOG.event.data.previousLogin.country);
			$("#prevRegion").text(LOG.event.data.previousLogin.region);
			$("#prevTimeZone").text(LOG.event.data.previousLogin.timeZone);			
			$("#prevDomain").text(LOG.event.data.previousLogin.domain);
			$("#prevISP").text(LOG.event.data.previousLogin.isp);
			
			var currentDT = new XDate(LOG.event.data.currentLogin.timestamp);
			$("#currentTime").text(currentDT.toString());
			$("#currentCity").text(LOG.event.data.currentLogin.city);
			$("#currentCountry").text(LOG.event.data.currentLogin.country);
			$("#currentRegion").text(LOG.event.data.currentLogin.region);
			$("#currentTimeZone").text(LOG.event.data.currentLogin.timeZone);
			$("#currentDomain").text(LOG.event.data.currentLogin.domain);
			$("#currentISP").text(LOG.event.data.currentLogin.isp);
			
			$("#distance").text(LOG.event.data.distance);
			$("#speed").text(LOG.event.data.mph);
			$("#elapsedMinutes").text(LOG.event.data.elapsedMinutes);
			
			$("#freeze-user-btn").live('click',function(event){
				if(frozen){ return;}
				var r = confirm('Freezing User Account. Sure?');
				if(r == false){ return; }
				$("#loading-img").show();
				freezeUser();
				return false;
			});
			
			$("#create-case-btn").live('click',function(event){
				if(case_created){ return;}
				$("#loading-img").show();
				var subject 	= 'Concurrent Login Event: ' + LOG.event.data.userName;
				var description = LOG.event.data.userName + " logged in from 2 geographically separate locations within a short time span.";
				LOG.createCase(subject, description);
			});
		});
	</script>
</head>
	<div id="details-header">
		<a id="back-btn" href="#">Back</a>
		<span id="details-header-text"></span>
	</div>
	<p>
		<strong><span id="username"></span></strong> has logged in from 2 geographically different locations within a short time frame.
	</p>	
	<p>
	Distance between locations: <span id="distance"></span> Miles
	</p>
	<p>
	Time between logins: <span id="elapsedMinutes"></span> Minutes
	</p>
	<div id="map-canvas"></div><br/>
	<img id="loading-img" src="https://logalytics.herokuapp.com/static/img/ajax-loader.gif" style="margin-left:155px; display: none;" />
	<div id="freeze-user-btn" class="mobile-btn red-background">Freeze User</div>
	<div id="create-case-btn" class="mobile-btn green-background">Create Case</div>
	<p>
	<strong>Recent Login</strong>
	<table>
		<tr><td>Time:</td><td id="currentTime"></td></tr>
		<tr><td>City</td><td id="currentCity"></td></tr>
		<tr><td>Country:</td><td id="currentCountry"></td></tr>
		<tr><td>Region:</td><td id="currentRegion"></td></tr>
		<tr><td>Time Zone:</td><td id="currentTimeZone"></td></tr>
		<tr><td>Domain:</td><td id="currentDomain"></td></tr>
		<tr><td>ISP:</td><td id="currentISP"></td></tr>
	</table>
	</p>
	
	<p>
	<strong>Previous Login</strong>
	<table>
		<tr><td>Time:</td><td id="prevTime"></td></tr>
		<tr><td>City</td><td id="prevCity"></td></tr>
		<tr><td>Country:</td><td id="prevCountry"></td></tr>
		<tr><td>Region:</td><td id="prevRegion"></td></tr>
		<tr><td>Time Zone:</td><td id="prevTimeZone"></td></tr>
		<tr><td>Domain:</td><td id="prevDomain"></td></tr>
		<tr><td>ISP:</td><td id="prevISP"></td></tr>
	</table>
	</p>
	<div id="stretch"></div>
</apex:page>